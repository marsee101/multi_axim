// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "multi_axim.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic multi_axim::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic multi_axim::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> multi_axim::ap_ST_st1_fsm_0 = "1";
const sc_lv<12> multi_axim::ap_ST_st2_fsm_1 = "10";
const sc_lv<12> multi_axim::ap_ST_st3_fsm_2 = "100";
const sc_lv<12> multi_axim::ap_ST_st4_fsm_3 = "1000";
const sc_lv<12> multi_axim::ap_ST_st5_fsm_4 = "10000";
const sc_lv<12> multi_axim::ap_ST_st6_fsm_5 = "100000";
const sc_lv<12> multi_axim::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<12> multi_axim::ap_ST_pp0_stg0_fsm_7 = "10000000";
const sc_lv<12> multi_axim::ap_ST_st17_fsm_8 = "100000000";
const sc_lv<12> multi_axim::ap_ST_st18_fsm_9 = "1000000000";
const sc_lv<12> multi_axim::ap_ST_st19_fsm_10 = "10000000000";
const sc_lv<12> multi_axim::ap_ST_st20_fsm_11 = "100000000000";
const sc_lv<32> multi_axim::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> multi_axim::ap_const_lv1_1 = "1";
const int multi_axim::C_S_AXI_DATA_WIDTH = "100000";
const int multi_axim::C_M_AXI_DATA_WIDTH = "100000";
const int multi_axim::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int multi_axim::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int multi_axim::C_M_AXI_GMEM_CACHE_VALUE = "11";
const sc_lv<32> multi_axim::ap_const_lv32_1 = "1";
const sc_lv<32> multi_axim::ap_const_lv32_6 = "110";
const sc_lv<32> multi_axim::ap_const_lv32_7 = "111";
const sc_lv<1> multi_axim::ap_const_lv1_0 = "0";
const sc_lv<4> multi_axim::ap_const_lv4_0 = "0000";
const sc_lv<32> multi_axim::ap_const_lv32_A = "1010";
const sc_lv<3> multi_axim::ap_const_lv3_0 = "000";
const sc_lv<2> multi_axim::ap_const_lv2_0 = "00";
const sc_lv<4> multi_axim::ap_const_lv4_F = "1111";
const sc_lv<32> multi_axim::ap_const_lv32_B = "1011";
const sc_lv<32> multi_axim::ap_const_lv32_2 = "10";
const sc_lv<32> multi_axim::ap_const_lv32_1F = "11111";
const sc_lv<4> multi_axim::ap_const_lv4_A = "1010";
const sc_lv<4> multi_axim::ap_const_lv4_1 = "1";

multi_axim::multi_axim(sc_module_name name) : sc_module(name), mVcdFile(0) {
    multi_axim_AXILiteS_s_axi_U = new multi_axim_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("multi_axim_AXILiteS_s_axi_U");
    multi_axim_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    multi_axim_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    multi_axim_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    multi_axim_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    multi_axim_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    multi_axim_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    multi_axim_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    multi_axim_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    multi_axim_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    multi_axim_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    multi_axim_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    multi_axim_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    multi_axim_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    multi_axim_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    multi_axim_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    multi_axim_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    multi_axim_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    multi_axim_AXILiteS_s_axi_U->ACLK(ap_clk);
    multi_axim_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    multi_axim_AXILiteS_s_axi_U->ACLK_EN(multi_axim_AXILiteS_s_axi_U_ap_dummy_ce);
    multi_axim_AXILiteS_s_axi_U->ap_start(ap_start);
    multi_axim_AXILiteS_s_axi_U->interrupt(interrupt);
    multi_axim_AXILiteS_s_axi_U->ap_ready(ap_ready);
    multi_axim_AXILiteS_s_axi_U->ap_done(ap_done);
    multi_axim_AXILiteS_s_axi_U->ap_idle(ap_idle);
    multi_axim_AXILiteS_s_axi_U->ap_return(ap_return);
    multi_axim_AXILiteS_s_axi_U->x(x);
    multi_axim_AXILiteS_s_axi_U->y(y);
    multi_axim_gmem_m_axi_U = new multi_axim_gmem_m_axi<32,32,5,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("multi_axim_gmem_m_axi_U");
    multi_axim_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    multi_axim_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    multi_axim_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    multi_axim_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    multi_axim_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    multi_axim_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    multi_axim_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    multi_axim_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    multi_axim_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    multi_axim_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    multi_axim_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    multi_axim_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    multi_axim_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    multi_axim_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    multi_axim_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    multi_axim_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    multi_axim_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    multi_axim_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    multi_axim_gmem_m_axi_U->WID(m_axi_gmem_WID);
    multi_axim_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    multi_axim_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    multi_axim_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    multi_axim_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    multi_axim_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    multi_axim_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    multi_axim_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    multi_axim_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    multi_axim_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    multi_axim_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    multi_axim_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    multi_axim_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    multi_axim_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    multi_axim_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    multi_axim_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    multi_axim_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    multi_axim_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    multi_axim_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    multi_axim_gmem_m_axi_U->RID(m_axi_gmem_RID);
    multi_axim_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    multi_axim_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    multi_axim_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    multi_axim_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    multi_axim_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    multi_axim_gmem_m_axi_U->BID(m_axi_gmem_BID);
    multi_axim_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    multi_axim_gmem_m_axi_U->ACLK(ap_clk);
    multi_axim_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    multi_axim_gmem_m_axi_U->ACLK_EN(multi_axim_gmem_m_axi_U_ap_dummy_ce);
    multi_axim_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    multi_axim_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    multi_axim_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    multi_axim_gmem_m_axi_U->I_ARID(gmem_ARID);
    multi_axim_gmem_m_axi_U->I_ARLEN(gmem_ARLEN);
    multi_axim_gmem_m_axi_U->I_ARSIZE(gmem_ARSIZE);
    multi_axim_gmem_m_axi_U->I_ARLOCK(gmem_ARLOCK);
    multi_axim_gmem_m_axi_U->I_ARCACHE(gmem_ARCACHE);
    multi_axim_gmem_m_axi_U->I_ARQOS(gmem_ARQOS);
    multi_axim_gmem_m_axi_U->I_ARPROT(gmem_ARPROT);
    multi_axim_gmem_m_axi_U->I_ARUSER(gmem_ARUSER);
    multi_axim_gmem_m_axi_U->I_ARBURST(gmem_ARBURST);
    multi_axim_gmem_m_axi_U->I_ARREGION(gmem_ARREGION);
    multi_axim_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    multi_axim_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    multi_axim_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    multi_axim_gmem_m_axi_U->I_RID(gmem_RID);
    multi_axim_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    multi_axim_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    multi_axim_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    multi_axim_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    multi_axim_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    multi_axim_gmem_m_axi_U->I_AWADDR(gmem_AWADDR);
    multi_axim_gmem_m_axi_U->I_AWID(gmem_AWID);
    multi_axim_gmem_m_axi_U->I_AWLEN(gmem_AWLEN);
    multi_axim_gmem_m_axi_U->I_AWSIZE(gmem_AWSIZE);
    multi_axim_gmem_m_axi_U->I_AWLOCK(gmem_AWLOCK);
    multi_axim_gmem_m_axi_U->I_AWCACHE(gmem_AWCACHE);
    multi_axim_gmem_m_axi_U->I_AWQOS(gmem_AWQOS);
    multi_axim_gmem_m_axi_U->I_AWPROT(gmem_AWPROT);
    multi_axim_gmem_m_axi_U->I_AWUSER(gmem_AWUSER);
    multi_axim_gmem_m_axi_U->I_AWBURST(gmem_AWBURST);
    multi_axim_gmem_m_axi_U->I_AWREGION(gmem_AWREGION);
    multi_axim_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    multi_axim_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    multi_axim_gmem_m_axi_U->I_WDATA(gmem_WDATA);
    multi_axim_gmem_m_axi_U->I_WID(gmem_WID);
    multi_axim_gmem_m_axi_U->I_WUSER(gmem_WUSER);
    multi_axim_gmem_m_axi_U->I_WLAST(gmem_WLAST);
    multi_axim_gmem_m_axi_U->I_WSTRB(gmem_WSTRB);
    multi_axim_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    multi_axim_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    multi_axim_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    multi_axim_gmem_m_axi_U->I_BID(gmem_BID);
    multi_axim_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    multi_axim_mul_32s_32s_32_6_U0 = new multi_axim_mul_32s_32s_32_6<1,6,32,32,32>("multi_axim_mul_32s_32s_32_6_U0");
    multi_axim_mul_32s_32s_32_6_U0->clk(ap_clk);
    multi_axim_mul_32s_32s_32_6_U0->reset(ap_rst_n_inv);
    multi_axim_mul_32s_32s_32_6_U0->din0(grp_fu_171_p0);
    multi_axim_mul_32s_32s_32_6_U0->din1(grp_fu_171_p1);
    multi_axim_mul_32s_32s_32_6_U0->ce(grp_fu_171_ce);
    multi_axim_mul_32s_32s_32_6_U0->dout(grp_fu_171_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_sig_cseq_ST_st20_fsm_11 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_sig_cseq_ST_st20_fsm_11 );

    SC_METHOD(thread_ap_return);
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_sig_cseq_ST_st20_fsm_11 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_220);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_233);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_246);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_254);
    sensitive << ( gmem_RVALID );
    sensitive << ( exitcond_reg_197 );

    SC_METHOD(thread_ap_sig_bdd_356);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_446);
    sensitive << ( ap_reg_ppstg_exitcond_reg_197_pp0_it7 );
    sensitive << ( ap_reg_ppiten_pp0_it8 );

    SC_METHOD(thread_ap_sig_bdd_447);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_sig_bdd_254 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_ap_sig_bdd_53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_pp0_stg0_fsm_7);
    sensitive << ( ap_sig_bdd_246 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_53 );

    SC_METHOD(thread_ap_sig_cseq_ST_st20_fsm_11);
    sensitive << ( ap_sig_bdd_356 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_220 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_bdd_233 );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_AWREADY);
    sensitive << ( gmem_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_WREADY);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_exitcond_fu_154_p2);
    sensitive << ( i_reg_103 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_7 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_254 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_197_pp0_it7 );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );
    sensitive << ( ap_reg_ppiten_pp0_it8 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_6_fu_134_p1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_ARBURST);

    SC_METHOD(thread_gmem_ARCACHE);

    SC_METHOD(thread_gmem_ARID);

    SC_METHOD(thread_gmem_ARLEN);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_ARLOCK);

    SC_METHOD(thread_gmem_ARPROT);

    SC_METHOD(thread_gmem_ARQOS);

    SC_METHOD(thread_gmem_ARREGION);

    SC_METHOD(thread_gmem_ARSIZE);

    SC_METHOD(thread_gmem_ARUSER);

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_AWADDR);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_5_fu_144_p1 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_AWBURST);

    SC_METHOD(thread_gmem_AWCACHE);

    SC_METHOD(thread_gmem_AWID);

    SC_METHOD(thread_gmem_AWLEN);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_AWLOCK);

    SC_METHOD(thread_gmem_AWPROT);

    SC_METHOD(thread_gmem_AWQOS);

    SC_METHOD(thread_gmem_AWREGION);

    SC_METHOD(thread_gmem_AWSIZE);

    SC_METHOD(thread_gmem_AWUSER);

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_sig_cseq_ST_st20_fsm_11 );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( exitcond_reg_197 );
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_7 );
    sensitive << ( ap_sig_bdd_254 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_197_pp0_it7 );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );
    sensitive << ( ap_reg_ppiten_pp0_it8 );

    SC_METHOD(thread_gmem_WDATA);
    sensitive << ( ap_sig_bdd_254 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_197_pp0_it7 );
    sensitive << ( ap_reg_ppiten_pp0_it8 );
    sensitive << ( tmp_2_reg_217 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_WID);

    SC_METHOD(thread_gmem_WLAST);

    SC_METHOD(thread_gmem_WSTRB);
    sensitive << ( ap_sig_bdd_254 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_197_pp0_it7 );
    sensitive << ( ap_reg_ppiten_pp0_it8 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_WUSER);

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_sig_bdd_254 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_197_pp0_it7 );
    sensitive << ( ap_reg_ppiten_pp0_it8 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_grp_fu_171_ce);
    sensitive << ( ap_sig_cseq_ST_pp0_stg0_fsm_7 );
    sensitive << ( ap_sig_bdd_254 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_197_pp0_it7 );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );
    sensitive << ( ap_reg_ppiten_pp0_it8 );

    SC_METHOD(thread_grp_fu_171_p0);
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( gmem_addr_1_read_reg_206 );

    SC_METHOD(thread_grp_fu_171_p1);
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( gmem_addr_1_read_reg_206 );

    SC_METHOD(thread_i_1_fu_160_p2);
    sensitive << ( i_reg_103 );

    SC_METHOD(thread_multi_axim_AXILiteS_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_multi_axim_gmem_m_axi_U_ap_dummy_ce);

    SC_METHOD(thread_tmp_5_fu_144_p1);
    sensitive << ( tmp_reg_176 );

    SC_METHOD(thread_tmp_6_fu_134_p1);
    sensitive << ( tmp_4_reg_181 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );
    sensitive << ( exitcond_fu_154_p2 );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_sig_bdd_254 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it7 );
    sensitive << ( ap_reg_ppstg_exitcond_reg_197_pp0_it7 );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );
    sensitive << ( ap_reg_ppiten_pp0_it8 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000000001";
    ap_reg_ppiten_pp0_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it3 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it4 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it5 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it6 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it7 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it8 = SC_LOGIC_0;
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "multi_axim_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_53, "ap_sig_bdd_53");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, x, "x");
    sc_trace(mVcdFile, y, "y");
    sc_trace(mVcdFile, ap_return, "ap_return");
    sc_trace(mVcdFile, multi_axim_AXILiteS_s_axi_U_ap_dummy_ce, "multi_axim_AXILiteS_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_AWADDR, "gmem_AWADDR");
    sc_trace(mVcdFile, gmem_AWID, "gmem_AWID");
    sc_trace(mVcdFile, gmem_AWLEN, "gmem_AWLEN");
    sc_trace(mVcdFile, gmem_AWSIZE, "gmem_AWSIZE");
    sc_trace(mVcdFile, gmem_AWBURST, "gmem_AWBURST");
    sc_trace(mVcdFile, gmem_AWLOCK, "gmem_AWLOCK");
    sc_trace(mVcdFile, gmem_AWCACHE, "gmem_AWCACHE");
    sc_trace(mVcdFile, gmem_AWPROT, "gmem_AWPROT");
    sc_trace(mVcdFile, gmem_AWQOS, "gmem_AWQOS");
    sc_trace(mVcdFile, gmem_AWREGION, "gmem_AWREGION");
    sc_trace(mVcdFile, gmem_AWUSER, "gmem_AWUSER");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_WDATA, "gmem_WDATA");
    sc_trace(mVcdFile, gmem_WSTRB, "gmem_WSTRB");
    sc_trace(mVcdFile, gmem_WLAST, "gmem_WLAST");
    sc_trace(mVcdFile, gmem_WID, "gmem_WID");
    sc_trace(mVcdFile, gmem_WUSER, "gmem_WUSER");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_ARID, "gmem_ARID");
    sc_trace(mVcdFile, gmem_ARLEN, "gmem_ARLEN");
    sc_trace(mVcdFile, gmem_ARSIZE, "gmem_ARSIZE");
    sc_trace(mVcdFile, gmem_ARBURST, "gmem_ARBURST");
    sc_trace(mVcdFile, gmem_ARLOCK, "gmem_ARLOCK");
    sc_trace(mVcdFile, gmem_ARCACHE, "gmem_ARCACHE");
    sc_trace(mVcdFile, gmem_ARPROT, "gmem_ARPROT");
    sc_trace(mVcdFile, gmem_ARQOS, "gmem_ARQOS");
    sc_trace(mVcdFile, gmem_ARREGION, "gmem_ARREGION");
    sc_trace(mVcdFile, gmem_ARUSER, "gmem_ARUSER");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, multi_axim_gmem_m_axi_U_ap_dummy_ce, "multi_axim_gmem_m_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, i_reg_103, "i_reg_103");
    sc_trace(mVcdFile, tmp_reg_176, "tmp_reg_176");
    sc_trace(mVcdFile, tmp_4_reg_181, "tmp_4_reg_181");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_220, "ap_sig_bdd_220");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_bdd_233, "ap_sig_bdd_233");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_AWREADY, "ap_sig_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, exitcond_fu_154_p2, "exitcond_fu_154_p2");
    sc_trace(mVcdFile, exitcond_reg_197, "exitcond_reg_197");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp0_stg0_fsm_7, "ap_sig_cseq_ST_pp0_stg0_fsm_7");
    sc_trace(mVcdFile, ap_sig_bdd_246, "ap_sig_bdd_246");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_sig_bdd_254, "ap_sig_bdd_254");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it3, "ap_reg_ppiten_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it4, "ap_reg_ppiten_pp0_it4");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it5, "ap_reg_ppiten_pp0_it5");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it6, "ap_reg_ppiten_pp0_it6");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it7, "ap_reg_ppiten_pp0_it7");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_197_pp0_it7, "ap_reg_ppstg_exitcond_reg_197_pp0_it7");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_WREADY, "ap_sig_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it8, "ap_reg_ppiten_pp0_it8");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_197_pp0_it1, "ap_reg_ppstg_exitcond_reg_197_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_197_pp0_it2, "ap_reg_ppstg_exitcond_reg_197_pp0_it2");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_197_pp0_it3, "ap_reg_ppstg_exitcond_reg_197_pp0_it3");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_197_pp0_it4, "ap_reg_ppstg_exitcond_reg_197_pp0_it4");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_197_pp0_it5, "ap_reg_ppstg_exitcond_reg_197_pp0_it5");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond_reg_197_pp0_it6, "ap_reg_ppstg_exitcond_reg_197_pp0_it6");
    sc_trace(mVcdFile, i_1_fu_160_p2, "i_1_fu_160_p2");
    sc_trace(mVcdFile, gmem_addr_1_read_reg_206, "gmem_addr_1_read_reg_206");
    sc_trace(mVcdFile, grp_fu_171_p2, "grp_fu_171_p2");
    sc_trace(mVcdFile, tmp_2_reg_217, "tmp_2_reg_217");
    sc_trace(mVcdFile, tmp_6_fu_134_p1, "tmp_6_fu_134_p1");
    sc_trace(mVcdFile, tmp_5_fu_144_p1, "tmp_5_fu_144_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_AWREADY, "ap_reg_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_WREADY, "ap_reg_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st20_fsm_11, "ap_sig_cseq_ST_st20_fsm_11");
    sc_trace(mVcdFile, ap_sig_bdd_356, "ap_sig_bdd_356");
    sc_trace(mVcdFile, grp_fu_171_p0, "grp_fu_171_p0");
    sc_trace(mVcdFile, grp_fu_171_p1, "grp_fu_171_p1");
    sc_trace(mVcdFile, grp_fu_171_ce, "grp_fu_171_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_447, "ap_sig_bdd_447");
    sc_trace(mVcdFile, ap_sig_bdd_446, "ap_sig_bdd_446");
#endif

    }
    mHdltvinHandle.open("multi_axim.hdltvin.dat");
    mHdltvoutHandle.open("multi_axim.hdltvout.dat");
}

multi_axim::~multi_axim() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete multi_axim_AXILiteS_s_axi_U;
    delete multi_axim_gmem_m_axi_U;
    delete multi_axim_mul_32s_32s_32_6_U0;
}

void multi_axim::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read())) {
                ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) {
                ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read())) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_AWREADY.read())) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_446.read()) {
            if (!((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read())))) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
            } else if (ap_sig_bdd_447.read()) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
             !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))) && 
             !esl_seteq<1,1,1>(exitcond_fu_154_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
                    !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read()))) {
            ap_reg_ppiten_pp0_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
             !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))) && 
             esl_seteq<1,1,1>(exitcond_fu_154_p2.read(), ap_const_lv1_0))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
                     !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
                     !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))) && 
                     !esl_seteq<1,1,1>(exitcond_fu_154_p2.read(), ap_const_lv1_0)))) {
            ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read())))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it3 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read())))) {
            ap_reg_ppiten_pp0_it3 = ap_reg_ppiten_pp0_it2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it4 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read())))) {
            ap_reg_ppiten_pp0_it4 = ap_reg_ppiten_pp0_it3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it5 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read())))) {
            ap_reg_ppiten_pp0_it5 = ap_reg_ppiten_pp0_it4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it6 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read())))) {
            ap_reg_ppiten_pp0_it6 = ap_reg_ppiten_pp0_it5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it7 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read())))) {
            ap_reg_ppiten_pp0_it7 = ap_reg_ppiten_pp0_it6.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it8 = ap_const_logic_0;
    } else {
        if (!((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read())))) {
            ap_reg_ppiten_pp0_it8 = ap_reg_ppiten_pp0_it7.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
                    !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read()))) {
            ap_reg_ppiten_pp0_it8 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))) && 
         esl_seteq<1,1,1>(exitcond_fu_154_p2.read(), ap_const_lv1_0))) {
        i_reg_103 = i_1_fu_160_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
                !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read()))) {
        i_reg_103 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))))) {
        ap_reg_ppstg_exitcond_reg_197_pp0_it1 = exitcond_reg_197.read();
        exitcond_reg_197 = exitcond_fu_154_p2.read();
    }
    if (!((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read())))) {
        ap_reg_ppstg_exitcond_reg_197_pp0_it2 = ap_reg_ppstg_exitcond_reg_197_pp0_it1.read();
        ap_reg_ppstg_exitcond_reg_197_pp0_it3 = ap_reg_ppstg_exitcond_reg_197_pp0_it2.read();
        ap_reg_ppstg_exitcond_reg_197_pp0_it4 = ap_reg_ppstg_exitcond_reg_197_pp0_it3.read();
        ap_reg_ppstg_exitcond_reg_197_pp0_it5 = ap_reg_ppstg_exitcond_reg_197_pp0_it4.read();
        ap_reg_ppstg_exitcond_reg_197_pp0_it6 = ap_reg_ppstg_exitcond_reg_197_pp0_it5.read();
        ap_reg_ppstg_exitcond_reg_197_pp0_it7 = ap_reg_ppstg_exitcond_reg_197_pp0_it6.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && esl_seteq<1,1,1>(exitcond_reg_197.read(), ap_const_lv1_0) && !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))))) {
        gmem_addr_1_read_reg_206 = gmem_RDATA.read();
    }
    if ((!((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it6.read()))) {
        tmp_2_reg_217 = grp_fu_171_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_4_reg_181 = x.read().range(31, 2);
        tmp_reg_176 = y.read().range(31, 2);
    }
}

void multi_axim::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st20_fsm_11.read()) && 
         !esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void multi_axim::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void multi_axim::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st20_fsm_11.read()) && 
         !esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void multi_axim::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void multi_axim::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void multi_axim::thread_ap_sig_bdd_220() {
    ap_sig_bdd_220 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void multi_axim::thread_ap_sig_bdd_233() {
    ap_sig_bdd_233 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void multi_axim::thread_ap_sig_bdd_246() {
    ap_sig_bdd_246 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void multi_axim::thread_ap_sig_bdd_254() {
    ap_sig_bdd_254 = (esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_reg_197.read(), ap_const_lv1_0));
}

void multi_axim::thread_ap_sig_bdd_356() {
    ap_sig_bdd_356 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(11, 11));
}

void multi_axim::thread_ap_sig_bdd_446() {
    ap_sig_bdd_446 = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()));
}

void multi_axim::thread_ap_sig_bdd_447() {
    ap_sig_bdd_447 = (esl_seteq<1,1,1>(ap_const_logic_1, gmem_WREADY.read()) && !(ap_sig_bdd_254.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())));
}

void multi_axim::thread_ap_sig_bdd_53() {
    ap_sig_bdd_53 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void multi_axim::thread_ap_sig_cseq_ST_pp0_stg0_fsm_7() {
    if (ap_sig_bdd_246.read()) {
        ap_sig_cseq_ST_pp0_stg0_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp0_stg0_fsm_7 = ap_const_logic_0;
    }
}

void multi_axim::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_53.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void multi_axim::thread_ap_sig_cseq_ST_st20_fsm_11() {
    if (ap_sig_bdd_356.read()) {
        ap_sig_cseq_ST_st20_fsm_11 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st20_fsm_11 = ap_const_logic_0;
    }
}

void multi_axim::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_220.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void multi_axim::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_bdd_233.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void multi_axim::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void multi_axim::thread_ap_sig_ioackin_gmem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read())) {
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    }
}

void multi_axim::thread_ap_sig_ioackin_gmem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read())) {
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    }
}

void multi_axim::thread_exitcond_fu_154_p2() {
    exitcond_fu_154_p2 = (!i_reg_103.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_103.read() == ap_const_lv4_A);
}

void multi_axim::thread_gmem_ARADDR() {
    gmem_ARADDR =  (sc_lv<32>) (tmp_6_fu_134_p1.read());
}

void multi_axim::thread_gmem_ARBURST() {
    gmem_ARBURST = ap_const_lv2_0;
}

void multi_axim::thread_gmem_ARCACHE() {
    gmem_ARCACHE = ap_const_lv4_0;
}

void multi_axim::thread_gmem_ARID() {
    gmem_ARID = ap_const_lv1_0;
}

void multi_axim::thread_gmem_ARLEN() {
    gmem_ARLEN = ap_const_lv32_A;
}

void multi_axim::thread_gmem_ARLOCK() {
    gmem_ARLOCK = ap_const_lv2_0;
}

void multi_axim::thread_gmem_ARPROT() {
    gmem_ARPROT = ap_const_lv3_0;
}

void multi_axim::thread_gmem_ARQOS() {
    gmem_ARQOS = ap_const_lv4_0;
}

void multi_axim::thread_gmem_ARREGION() {
    gmem_ARREGION = ap_const_lv4_0;
}

void multi_axim::thread_gmem_ARSIZE() {
    gmem_ARSIZE = ap_const_lv3_0;
}

void multi_axim::thread_gmem_ARUSER() {
    gmem_ARUSER = ap_const_lv1_0;
}

void multi_axim::thread_gmem_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void multi_axim::thread_gmem_AWADDR() {
    gmem_AWADDR =  (sc_lv<32>) (tmp_5_fu_144_p1.read());
}

void multi_axim::thread_gmem_AWBURST() {
    gmem_AWBURST = ap_const_lv2_0;
}

void multi_axim::thread_gmem_AWCACHE() {
    gmem_AWCACHE = ap_const_lv4_0;
}

void multi_axim::thread_gmem_AWID() {
    gmem_AWID = ap_const_lv1_0;
}

void multi_axim::thread_gmem_AWLEN() {
    gmem_AWLEN = ap_const_lv32_A;
}

void multi_axim::thread_gmem_AWLOCK() {
    gmem_AWLOCK = ap_const_lv2_0;
}

void multi_axim::thread_gmem_AWPROT() {
    gmem_AWPROT = ap_const_lv3_0;
}

void multi_axim::thread_gmem_AWQOS() {
    gmem_AWQOS = ap_const_lv4_0;
}

void multi_axim::thread_gmem_AWREGION() {
    gmem_AWREGION = ap_const_lv4_0;
}

void multi_axim::thread_gmem_AWSIZE() {
    gmem_AWSIZE = ap_const_lv3_0;
}

void multi_axim::thread_gmem_AWUSER() {
    gmem_AWUSER = ap_const_lv1_0;
}

void multi_axim::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read()))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void multi_axim::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st20_fsm_11.read()) && 
         !esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_0))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void multi_axim::thread_gmem_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_197.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void multi_axim::thread_gmem_WDATA() {
    gmem_WDATA = tmp_2_reg_217.read();
}

void multi_axim::thread_gmem_WID() {
    gmem_WID = ap_const_lv1_0;
}

void multi_axim::thread_gmem_WLAST() {
    gmem_WLAST = ap_const_logic_0;
}

void multi_axim::thread_gmem_WSTRB() {
    gmem_WSTRB = ap_const_lv4_F;
}

void multi_axim::thread_gmem_WUSER() {
    gmem_WUSER = ap_const_lv1_0;
}

void multi_axim::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()) && 
         !(ap_sig_bdd_254.read() && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read()))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void multi_axim::thread_grp_fu_171_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp0_stg0_fsm_7.read()) && 
         !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))))) {
        grp_fu_171_ce = ap_const_logic_1;
    } else {
        grp_fu_171_ce = ap_const_logic_0;
    }
}

void multi_axim::thread_grp_fu_171_p0() {
    grp_fu_171_p0 = gmem_addr_1_read_reg_206.read();
}

void multi_axim::thread_grp_fu_171_p1() {
    grp_fu_171_p1 = (!gmem_addr_1_read_reg_206.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(gmem_addr_1_read_reg_206.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void multi_axim::thread_i_1_fu_160_p2() {
    i_1_fu_160_p2 = (!i_reg_103.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_103.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void multi_axim::thread_multi_axim_AXILiteS_s_axi_U_ap_dummy_ce() {
    multi_axim_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void multi_axim::thread_multi_axim_gmem_m_axi_U_ap_dummy_ce() {
    multi_axim_gmem_m_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void multi_axim::thread_tmp_5_fu_144_p1() {
    tmp_5_fu_144_p1 = esl_zext<64,30>(tmp_reg_176.read());
}

void multi_axim::thread_tmp_6_fu_134_p1() {
    tmp_6_fu_134_p1 = esl_zext<64,30>(tmp_4_reg_181.read());
}

void multi_axim::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_AWREADY.read())) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            }
            break;
        case 128 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()) && !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it7.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))) && !esl_seteq<1,1,1>(exitcond_fu_154_p2.read(), ap_const_lv1_0) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()) && 
  !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it7.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  !((ap_sig_bdd_254.read() && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond_reg_197_pp0_it7.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it8.read()))) && 
  !esl_seteq<1,1,1>(exitcond_fu_154_p2.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read())))) {
                ap_NS_fsm = ap_ST_st17_fsm_8;
            } else {
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st18_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st19_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st20_fsm_11;
            break;
        case 2048 : 
            if (!esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st20_fsm_11;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXX";
            break;
    }
}

void multi_axim::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

